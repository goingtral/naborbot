import nextcord
from nextcord.ext import commands
import sqlite3
import time

# –ö–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–æ—à–µ–ª" –∏ "–ù–µ –ø—Ä–æ—à–µ–ª" (–ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ)
class ButtonPassFail(nextcord.ui.View):
    def __init__(self, forms_instance, target_member, clan_role_id):
        super().__init__(timeout=None)
        self.forms_instance = forms_instance
        self.target_member = target_member
        self.clan_role_id = clan_role_id

    @nextcord.ui.button(label="–ü—Ä–æ—à–µ–ª", style=nextcord.ButtonStyle.grey)
    async def passed(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        required_role_id = 1419024003502313553 # –†–æ–ª—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞/–Ω–∞–±–æ—Ä—â–∏–∫–∞
        required_role = interaction.guild.get_role(required_role_id)
        
        if required_role and required_role in interaction.user.roles:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å
            try:
                clan_role = interaction.guild.get_role(self.clan_role_id)
                if clan_role:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å
                    if interaction.guild.me.guild_permissions.manage_roles and clan_role < interaction.guild.me.top_role:
                        await self.target_member.add_roles(clan_role)
                    else:
                        await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —ç—Ç–æ–π —Ä–æ–ª–∏!", ephemeral=True)
                        return
            except nextcord.Forbidden:
                await interaction.response.send_message("‚ùå –£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏!", ephemeral=True)
                return
            except Exception as e:
                await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            emb_success = nextcord.Embed(title="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", color=0x00ff00)
            emb_success.add_field(name="", value=f"* –ü—Ä–∏–≤–µ—Ç! {self.target_member.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–ª–∞–Ω –Ω–∞ Christians!", inline=False)
            try:
                await self.target_member.send(embed=emb_success)
            except:
                pass  # –ï—Å–ª–∏ –õ–° –∑–∞–∫—Ä—ã—Ç—ã
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            embed = interaction.message.embeds[0]
            embed.set_field_at(1, name="", value=f"* ‚úÖ –ü—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É ({interaction.user.mention})", inline=False)
            await interaction.message.edit(embed=embed, view=None)
            
            await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω!", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)

    @nextcord.ui.button(label="–ù–µ –ø—Ä–æ—à–µ–ª", style=nextcord.ButtonStyle.grey)
    async def failed(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        required_role_id = 1419024003502313553 # –†–æ–ª—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞/–Ω–∞–±–æ—Ä—â–∏–∫–∞
        required_role = interaction.guild.get_role(required_role_id)
        
        if required_role and required_role in interaction.user.roles:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            emb_fail = nextcord.Embed(title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –Ω–∞–±–æ—Ä–∞", color=0xff0000)
            emb_fail.add_field(name="", value=f"* –ü—Ä–∏–≤–µ—Ç! {self.target_member.mention}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –∫–ª–∞–Ω –Ω–∞ Christians.", inline=False)
            try:
                await self.target_member.send(embed=emb_fail)
            except:
                pass  # –ï—Å–ª–∏ –õ–° –∑–∞–∫—Ä—ã—Ç—ã
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–∏
            embed = interaction.message.embeds[0]
            embed.set_field_at(1, name="", value=f"* ‚ùå –ù–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É ({interaction.user.mention})", inline=False)
            await interaction.message.edit(embed=embed, view=None)
            
            await interaction.response.send_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)

# –ö–ª–∞—Å—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
class ModalView(nextcord.ui.Modal):
    def __init__(self, forms_instance):
        super().__init__("–ù–∞–±–æ—Ä –Ω–∞ Christians")
        self.forms_instance = forms_instance
        self.spOne = nextcord.ui.TextInput(
            label="–í–∞—à–µ –∏–º—è", placeholder="–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç", min_length=1, max_length=50)
        self.add_item(self.spOne)

        self.spTwo = nextcord.ui.TextInput(
            label="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç", placeholder="–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç", min_length=1, max_length=50)
        self.add_item(self.spTwo)

        self.spFour = nextcord.ui.TextInput(
            label="–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ–∏ —É–º–µ–Ω–∏—è?", placeholder="–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç", min_length=1, max_length=50)
        self.add_item(self.spFour)

        self.spThree = nextcord.ui.TextInput(
            label="–ù–∞ –∫–∞–∫–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤—ã —Ä–∞–Ω—å—à–µ —Å—Ç–æ—è–ª–∏?",
            placeholder="–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç",
            min_length=1,
            max_length=50
        )
        self.add_item(self.spThree)

    async def callback(self, interaction: nextcord.Interaction) -> None:
        if not await self.forms_instance.can_apply(interaction.user.id):
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π.", ephemeral=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        application_data = {
            "user": interaction.user,
            "spOne": self.spOne,
            "spTwo": self.spTwo,
            "spFour": self.spFour,
            "spThree": self.spThree
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∫–∞–Ω–∞–ª
        embed = nextcord.Embed(title="–ó–∞—è–≤–∫–∞ –Ω–∞ Christians", color=0x808080)
        embed.add_field(name="", value=f"* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {interaction.user.mention} ({interaction.user.id})", inline=False)
        embed.add_field(name="", value=f"* üìù –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏", inline=False)
        embed.add_field(name=f"{self.spOne.label}", value=f"```{self.spOne.value}```", inline=False)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name=f"{self.spTwo.label}", value=f"```{self.spTwo.value}```", inline=False)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name=f"{self.spFour.label}", value=f"```{self.spFour.value}```", inline=False)
        embed.add_field(name="", value=f"", inline=False)
        embed.add_field(name=f"{self.spThree.label}", value=f"```{self.spThree.value}```", inline=False)
        embed.set_thumbnail(url=interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url)
        
        view = ApplicationButtons(self.forms_instance, application_data)
        await self.forms_instance.channel.send(embed=embed, view=view)
        await interaction.response.send_message("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!", ephemeral=True)

# –ö–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π (–í–∑—è—Ç—å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ/–û—Ç–∫–ª–æ–Ω–∏—Ç—å)
class ApplicationButtons(nextcord.ui.View):
    def __init__(self, forms_instance, application_data):
        super().__init__(timeout=None)
        self.forms_instance = forms_instance
        self.application_data = application_data

    @nextcord.ui.button(label="–í–∑—è—Ç—å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", style=nextcord.ButtonStyle.grey)
    async def take_for_review(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        required_role_id = 1419024003502313553
        required_role = interaction.guild.get_role(required_role_id)
        
        if required_role and required_role in interaction.user.roles:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            emb_review = nextcord.Embed(title="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", color=0x808080)
            emb_review.add_field(name="", value=f"* –ü—Ä–∏–≤–µ—Ç! {self.application_data['user'].mention}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.", inline=False)
            try:
                await self.application_data['user'].send(embed=emb_review)
            except:
                pass  # –ï—Å–ª–∏ –õ–° –∑–∞–∫—Ä—ã—Ç—ã
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            embed = interaction.message.embeds[0]
            embed.set_field_at(1, name="", value=f"* üîç –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ ({interaction.user.mention})", inline=False)
            
            # –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ü—Ä–æ—à–µ–ª/–ù–µ –ø—Ä–æ—à–µ–ª"
            review_view = ButtonPassFail(
                self.forms_instance, 
                self.application_data['user'], 
                1419023974351896746  # ID —Ä–æ–ª–∏ –∫–ª–∞–Ω–∞
            )
            await interaction.message.edit(embed=embed, view=review_view)
            await interaction.response.send_message("–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)

    @nextcord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=nextcord.ButtonStyle.grey)
    async def reject(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        required_role_id = 1419024003502313553
        required_role = interaction.guild.get_role(required_role_id)
        
        if required_role and required_role in interaction.user.roles:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            emb_reject = nextcord.Embed(title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –Ω–∞–±–æ—Ä–∞", color=0x808080)
            emb_reject.add_field(name="", value=f"* –ü—Ä–∏–≤–µ—Ç! {self.application_data['user'].mention}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", inline=False)
            try:
                await self.application_data['user'].send(embed=emb_reject)
            except:
                pass  # –ï—Å–ª–∏ –õ–° –∑–∞–∫—Ä—ã—Ç—ã
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
            embed = interaction.message.embeds[0]
            embed.set_field_at(1, name="", value=f"* ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ({interaction.user.mention})", inline=False)
            await interaction.message.edit(embed=embed, view=None)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            current_time = int(time.time())
            self.forms_instance.c.execute("INSERT OR REPLACE INTO applications (user_id, status, rejection_time) VALUES (?, ?, ?)", 
                                         (self.application_data['user'].id, "Rejected", current_time))
            self.forms_instance.conn.commit()
            
            await interaction.response.send_message("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", ephemeral=True)

# –ö–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
class ApplyButton(nextcord.ui.View):
    def __init__(self, forms_instance):
        super().__init__(timeout=None)
        self.forms_instance = forms_instance

    @nextcord.ui.button(label="–ü–æ–¥–∞—Ç—å –ó–∞—è–≤–∫—É", style=nextcord.ButtonStyle.grey)
    async def apply(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if not await self.forms_instance.can_apply(interaction.user.id):
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π.", ephemeral=True)
            return
        modal = ModalView(self.forms_instance)
        await interaction.response.send_modal(modal)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–≥ Forms
class Forms(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.conn = sqlite3.connect('applications.db')
        self.c = self.conn.cursor()
        self.c.execute('''CREATE TABLE IF NOT EXISTS applications
                         (user_id INTEGER PRIMARY KEY, status TEXT, rejection_time INTEGER)''')
        self.conn.commit()
        self.channel = None

    @commands.Cog.listener()
    async def on_ready(self):
        print(f"–ú–æ–¥—É–ª—å –∑–∞—è–≤–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω")
        destination_guild = self.bot.get_guild(1418891695705034874)
        self.channel = destination_guild.get_channel(1418891696456073289)
        forms_channel = destination_guild.get_channel(1419024821177548880)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        async for message in forms_channel.history(limit=10):
            if message.author.id == self.bot.user.id:
                await message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        embed = nextcord.Embed(description="**–ù–∞–±–æ—Ä –Ω–∞ Christians**", color=0x808080)
        embed.add_field(name="–ß—Ç–æ –Ω–∞–º –æ—Ç –≤–∞—Å –Ω—É–∂–Ω–æ:", value="„Éª–ù—É–∂–Ω–æ —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ –æ—Ç 14 –ª–µ—Ç\n„Éª–ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å", inline=False)
        embed.set_image(url="https://media.discordapp.net/attachments/1418317831195332748/1419021549159190528/ae777ff2-bb1d-4d1e-a516-d0ab57328dab.png?ex=68d03e4d&is=68ceeccd&hm=e6890c9f651e16e00809e1ab12581d8ba6892a6cef2baaf199e75517a27137a8&=&format=webp&quality=lossless&width=525&height=350")
        
        view = ApplyButton(self)
        await forms_channel.send(embed=embed, view=view)

    async def can_apply(self, user_id):
        current_time = int(time.time())
        self.c.execute("SELECT rejection_time FROM applications WHERE user_id=?", (user_id,))
        result = self.c.fetchone()
        if result:
            if current_time - result[0] < 86400:
                return False
        return True

    def cog_unload(self):
        self.conn.close()

def setup(bot):
    bot.add_cog(Forms(bot))